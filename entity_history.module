<?php

/**
 * @file
 * Records which users have read which content.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Entities changed before this time are always shown as read.
 *
 * Entities changed within this time may be marked as new, updated, or read,
 * depending on their state for the current user. Defaults to 30 days ago.
 */
define('ENTITY_HISTORY_READ_LIMIT', REQUEST_TIME - 30 * 24 * 60 * 60);

/**
 * Implements hook_help().
 */
function entity_history_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.entity_history':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Entity-History module keeps track of which content a user has read. It marks content as <em>new</em> or <em>updated</em> depending on the last time the user viewed it. History records that are older than one month are removed during cron, which means that content older than one month is always considered <em>read</em>. The History module does not have a user interface but it provides a filter to <a href=":views-help">Views</a> to show new or updated content. For more information, see the <a href=":url">online documentation for the History module</a>.', array(
          ':views-help' => (\Drupal::moduleHandler()
            ->moduleExists('views')) ? \Drupal::url('help.page', array('name' => 'views')) : '#',
          ':url' => 'https://www.drupal.org/documentation/modules/history'
        )) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function entity_history_cron() {
  \Drupal::service('entity_history.repository')->purge();
}

/**
 * Implements hook_entity_view_alter() for node entities.
 */
function entity_history_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Per default we add  this for all full displays.
  if ($display->getOriginalMode() === 'full' || $display->getOriginalMode() === 'default') {
    entity_history_attach_to_build($build, $entity, $display);
  }
}

/**
 * Implementation of entity_history_attach_to_build().
 *
 * Helperfunction which can be called in hook_entity_view_alter to attach
 * entity_history functionallity to your own conditions.
 */
function entity_history_attach_to_build(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Update the entity_history table, stating that this user viewed this entity.
  $build['#cache']['contexts'][] = 'user.roles:authenticated';
  if (\Drupal::currentUser()->isAuthenticated()) {
    // When the window's "load" event is triggered, mark the node as read.
    // This still allows for Drupal behaviors (which are triggered on the
    // "DOMContentReady" event) to add "new" and "updated" indicators.
    $build['#attached']['library'][] = 'entity_history/mark-as-read';
    $build['#attached']['drupalSettings']['entityHistory']['entitiesToMarkAsRead'][$entity->getEntityTypeId()][$entity->id()] = TRUE;
  }

  $build['#attributes']['data-entity-history-entity-id'] = $entity->id();
  $build['#attributes']['data-entity-history-entity-type'] = $entity->getEntityTypeId();
}

/**
 * Implements hook_entity_delete().
 */
function entity_history_entity_delete(EntityInterface $entity) {
  \Drupal::service('entity_history.repository')->deleteByEntity($entity);
}

/**
 * Implements hook_user_cancel().
 */
function entity_history_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      \Drupal::service('entity_history.repository')->deleteByUser($account);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for user entities.
 */
function entity_history_user_delete($account) {
  \Drupal::service('entity_history.repository')->deleteByUser($account);
}

/**
 * #lazy_builder callback; attaches the last read timestamp for an entity.
 *
 * @param $entity_type_id
 *   The entity_type_id.
 * @param $entity_id
 *   The entity id.
 *
 * @return array $element
 *   The render element containing the attached data.
 */
function entity_history_attach_timestamp($entity_type_id, $entity_id) {
  $element = [];
  $account = \Drupal::currentUser();
  $history = \Drupal::service('entity_history.repository')
    ->getLastViewed($entity_type_id, [$entity_id], $account);

  $element['#attached']['drupalSettings']['entityHistory']['lastReadTimestamps'] = $history[$entity_id];
  return $element;
}

/**
 * Implements hook_entity_type_alter().
 */
function entity_history_entity_type_alter(&$entity_info) {
  // Add custom CommentViewBuilder to the comment entity, to be able to replace
  // the history "new" functionality.
  $handlers = $entity_info['comment']->get('handlers');
  $handlers['view_builder'] = 'Drupal\entity_history\CommentViewBuilder';
  $entity_info['comment']->set('handlers', $handlers);
}

/**
 * Implements hook_system_info_alter().
 */
function entity_history_system_info_alter(array &$info, Extension $file, $type) {
  // Remove all dependencies to the history module and replace them with
  // entity_history.
  if (!empty($info['dependencies']) && in_array('history', $info['dependencies'])) {
    if (($key = array_search('history', $info['dependencies'])) !== FALSE) {
      unset($info['dependencies'][$key]);
      $info['dependencies'][] = 'entity_history';
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function entity_history_modules_installed($modules) {
  // If history is enabled, perform some tasks to disable it.
  if (\Drupal::moduleHandler()->moduleExists('history')) {
    if (in_array('entity_history', $modules)) {
      $database = \Drupal::getContainer()->get('database');
      // Migrate history data to entity_history.
      $results = $database->query('SELECT uid, nid, timestamp FROM {history}');
      foreach ($results as $result) {
        // @todo: Load all comments of the nodes and add an entry for them as well.
        $database->merge('entity_history')
          ->keys(array(
            'uid' => $result->uid,
            'entity_id' => $result->nid,
            'entity_type' => 'node',
          ))
          ->fields(array('timestamp' => $result->timestamp))
          ->execute();
      }
      // Uninstall the history module.
      \Drupal::service('module_installer')->uninstall(['history']);
    }
  }
  // When forum gets activated, activate the entity_history_forum as well.
  if (in_array('forum', $modules)) {
    \Drupal::service('module_installer')->install(['entity_history_forum']);
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function entity_history_modules_uninstalled($modules) {
//  if (in_array('history', $modules)) {
//    // Install the history legacy layer module.
//    \Drupal::service('module_installer')->install(['history_legacy']);
//  }
}
